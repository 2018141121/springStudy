<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--引入数据库配置信息-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--连接数据库-->
    <bean id="dataSource22" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--配置SqlSessionFactory 也就是配置mybatis工厂 -->
    <bean id="sqlSessionFactory22" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--        注入数据库的信息-->
        <property name="dataSource" ref="dataSource22"/>

        <!--关联Mybatis-->
        <!--        mybatis的配置位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--        映射器位置 也就是mapper配置sql语句的位置-->
        <property name="mapperLocations" value="classpath:com/q/Mapper/*.xml"/>
    </bean>

    <!--注册sqlSessionTemplate , 关联sqlSessionFactory 也就是mybatis里面的sqlSession对象-->
    <bean id="sqlSessionTemplate22" class="org.mybatis.spring.SqlSessionTemplate">
        <!--利用构造器注入 把这个对象关联到工厂  相当于模板进去工厂  也就是说，我们这个模板的实现依赖于我们定义的工厂sqlSessionFactory2-->
        <constructor-arg index="0" ref="sqlSessionFactory22"/>
    </bean>

    <!--===============================配置事务管理==========================================-->
    <!--    配置声明式事务-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource22"/>
    </bean>

    <!--配置事务通知  也就是要切入的事务 例如：删除，添加等等-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--配置哪些方法使用什么样的事务,配置事务的传播特性-->
            <!--            <tx:method name="add" propagation="REQUIRED"/>-->
            <!--            <tx:method name="delete" propagation="REQUIRED"/>-->
            <!--            <tx:method name="update" propagation="REQUIRED"/>-->
            <!--            <tx:method name="search*" propagation="REQUIRED"/>-->
            <!--            <tx:method name="get" read-only="true"/>-->

            <!--            所有都支持事务-->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>


    <!--    配置事务切入-->
    <aop:config>
        <!--        配置切入点 也就是具体开启项目中的那个事务-->
        <aop:pointcut id="txPointCut" expression="execution(* com.q.Mapper.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>
</beans>